---
defaultChannel: alpha
description: |
  # OpenShift Lightspeed operator

  A Kubernetes operator for managing OpenShift Lightspeed service.

  ## Getting Started

  You'll need a OpenShift cluster to run against.

  **Note:** Your controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster `oc cluster-info` shows).

  ### Running on the cluster

  1. Deploy the controller to the cluster:

  ```sh
  make deploy
  ```

  2. Install Instances of Custom Resources:

  ```sh
  oc apply -f config/samples/ols_v1alpha1_olsconfig.yaml
  ```

  ### Uninstall CRDs

  To delete the CRDs from the cluster:

  ```sh
  make uninstall
  ```

  ### Undeploy controller

  UnDeploy the controller from the cluster:

  ```sh
  make undeploy
  ```

  ### How it works

  This project aims to follow the Kubernetes [Operator pattern](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/).

  It uses [Controllers](https://kubernetes.io/docs/concepts/architecture/controller/),
  which provide a reconcile function responsible for synchronizing resources until the desired state is reached on the cluster.

  ### Test It Out

  #### Run Operator Alone

  1. Install the CRDs into the cluster:

  ```sh
  make install
  ```

  2. Run your controller (this will run in the foreground, so switch to a new terminal if you want to leave it running):

  ```sh
  make run
  ```

  **NOTE:** You can also run this in one step by running: `make install run`

  #### Reconcile OLSConfig Custom Resource

  The namespace `openshift-lightspeed` should be created before this test.
  All the following resources are deployed into this namespace.

  1. Create secret containing the API Key for BAM or OpenAI. The key for API key is `apitoken`.

  ```yaml
  apiVersion: v1
  data:
    apitoken: <base64 encoded API Key>
  kind: Secret
  metadata:
    name: openai-api-keys
    namespace: openshift-lightspeed
  type: Opaque
  ```

  2. Create OLSConfig custom resource

  ```yaml
  apiVersion: ols.openshift.io/v1alpha1
  kind: OLSConfig
  metadata:
    name: cluster
    namespace: openshift-lightspeed
  spec:
    llm:
      providers:
      - credentialsSecretRef:
          name: openai-api-keys
        models:
        - name: gpt-3.5-turbo
        name: openai
        url: https://api.openai.com/v1
      - credentialsSecretRef:
          name: bam-api-keys
        models:
        - name: ibm/granite-13b-chat-v2
        name: bam
        url: https://bam-api.res.ibm.com
    ols:
      conversationCache:
        memory:
          maxEntries: 1000
        type: memory
      defaultModel: ibm/granite-13b-chat-v2
      defaultProvider: bam
      enableDeveloperUI: false
      logLevel: INFO
      deployment:
        replicas: 1
  ```

  3. The operator should create a configmap, a deployment and a service for running the [lightspeed-service](https://github.com/openshift/lightspeed-service) application server.

  ```shell
  ➜ kubectl get configmaps -n openshift-lightspeed
  NAME                       DATA   AGE
  kube-root-ca.crt           1      4h9m
  olsconfig                  1      4h9m
  openshift-service-ca.crt   1      4h9m

  ➜ kubectl get services -n openshift-lightspeed
  NAME                                                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
  lightspeed-app-server                                    ClusterIP   172.30.8.150    <none>        8080/TCP   22m
  lightspeed-operator-controller-manager-metrics-service   ClusterIP   172.30.35.253   <none>        8443/TCP   2d15h

  ➜ kubectl get deployments -n openshift-lightspeed
  NAME                                     READY   UP-TO-DATE   AVAILABLE   AGE
  lightspeed-app-server                    1/1     1            1           23m
  lightspeed-operator-controller-manager   1/1     1            1           2d15h

  ➜ kubectl get pods -n openshift-lightspeed
  NAME                                                      READY   STATUS    RESTARTS   AGE
  lightspeed-app-server-77bd6d666c-4ct7v                    1/1     Running   0          23m
  lightspeed-operator-controller-manager-6759d8c66d-bfnzs   2/2     Running   0          2d15h

  ➜ kubectl logs ols-app-server-5c9765967d-vvwnh -n openshift-lightspeed
  2024-02-02 12:00:06,982 [ols.app.main:main.py:29] INFO: Embedded Gradio UI is disabled. To enable set enable_dev_ui: true in the dev section of the configuration file
  INFO:     Started server process [1]
  INFO:     Waiting for application startup.
  INFO:     Application startup complete.
  INFO:     Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)
  ```

  ### Modifying the API definitions

  If you are editing the API definitions, generate the manifests such as CRs or CRDs using:

  ```sh
  make manifests
  ```

  **NOTE:** Run `make --help` for more information on all potential `make` targets

  ## Prerequisites

  To develop the Operator you'll need the following tools:

  - [OperatorSDK](https://v1-33-x.sdk.operatorframework.io/docs/installation), version 1.33
  - [git](https://git-scm.com/downloads)
  - [go](https://golang.org/dl/), version 1.21
  - [docker](https://docs.docker.com/install/), version 17.03+.
  - [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) or [oc](https://docs.openshift.com/container-platform/latest/cli_reference/openshift_cli/getting-started-cli.html#installing-openshift-cli) and access to an OpenShift cluster of a compatible version.
  - [golangci-lint](https://golangci-lint.run/usage/install/#local-installation), version v1.54.2
name: lightspeed-operator
schema: olm.package
---
image: quay.io/xrajesh/lightspeed-operator-bundle@sha256:dfa1d7fd22ac7b7bdfd26bbb2e3c9f93b25454450b6bc92da670043efa4d8037
name: lightspeed-operator.v0.0.32
package: lightspeed-operator
properties:
- type: olm.gvk
  value:
    group: ols.openshift.io
    kind: OLSConfig
    version: v1alpha1
- type: olm.package
  value:
    packageName: lightspeed-operator
    version: 0.0.0
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50Ijoia3ViZS1yYmFjLXByb3h5IiwiYXBwLmt1YmVybmV0ZXMuaW8vY3JlYXRlZC1ieSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3IiLCJhcHAua3ViZXJuZXRlcy5pby9pbnN0YW5jZSI6ImNvbnRyb2xsZXItbWFuYWdlci1tZXRyaWNzLXNlcnZpY2UiLCJhcHAua3ViZXJuZXRlcy5pby9tYW5hZ2VkLWJ5Ijoia3VzdG9taXplIiwiYXBwLmt1YmVybmV0ZXMuaW8vbmFtZSI6InNlcnZpY2UiLCJhcHAua3ViZXJuZXRlcy5pby9wYXJ0LW9mIjoibGlnaHRzcGVlZC1vcGVyYXRvciIsImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyLW1ldHJpY3Mtc2VydmljZSJ9LCJzcGVjIjp7InBvcnRzIjpbeyJuYW1lIjoiaHR0cHMiLCJwb3J0Ijo4NDQzLCJwcm90b2NvbCI6IlRDUCIsInRhcmdldFBvcnQiOiJodHRwcyJ9XSwic2VsZWN0b3IiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RhdHVzIjp7ImxvYWRCYWxhbmNlciI6e319fQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50Ijoia3ViZS1yYmFjLXByb3h5IiwiYXBwLmt1YmVybmV0ZXMuaW8vY3JlYXRlZC1ieSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3IiLCJhcHAua3ViZXJuZXRlcy5pby9pbnN0YW5jZSI6Im1ldHJpY3MtcmVhZGVyIiwiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJjbHVzdGVycm9sZSIsImFwcC5rdWJlcm5ldGVzLmlvL3BhcnQtb2YiOiJsaWdodHNwZWVkLW9wZXJhdG9yIn0sIm5hbWUiOiJsaWdodHNwZWVkLW9wZXJhdG9yLW1ldHJpY3MtcmVhZGVyIn0sInJ1bGVzIjpbeyJub25SZXNvdXJjZVVSTHMiOlsiL21ldHJpY3MiXSwidmVyYnMiOlsiZ2V0Il19XX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoib3BlcmF0b3JzLmNvcmVvcy5jb20vdjFhbHBoYTEiLCJraW5kIjoiQ2x1c3RlclNlcnZpY2VWZXJzaW9uIiwibWV0YWRhdGEiOnsiYW5ub3RhdGlvbnMiOnsiYWxtLWV4YW1wbGVzIjoiW1xuICB7XG4gICAgXCJhcGlWZXJzaW9uXCI6IFwib2xzLm9wZW5zaGlmdC5pby92MWFscGhhMVwiLFxuICAgIFwia2luZFwiOiBcIk9MU0NvbmZpZ1wiLFxuICAgIFwibWV0YWRhdGFcIjoge1xuICAgICAgXCJsYWJlbHNcIjoge1xuICAgICAgICBcImFwcC5rdWJlcm5ldGVzLmlvL2NyZWF0ZWQtYnlcIjogXCJsaWdodHNwZWVkLW9wZXJhdG9yXCIsXG4gICAgICAgIFwiYXBwLmt1YmVybmV0ZXMuaW8vaW5zdGFuY2VcIjogXCJvbHNjb25maWctc2FtcGxlXCIsXG4gICAgICAgIFwiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieVwiOiBcImt1c3RvbWl6ZVwiLFxuICAgICAgICBcImFwcC5rdWJlcm5ldGVzLmlvL25hbWVcIjogXCJvbHNjb25maWdcIixcbiAgICAgICAgXCJhcHAua3ViZXJuZXRlcy5pby9wYXJ0LW9mXCI6IFwibGlnaHRzcGVlZC1vcGVyYXRvclwiXG4gICAgICB9LFxuICAgICAgXCJuYW1lXCI6IFwib2xzY29uZmlnLXNhbXBsZVwiXG4gICAgfSxcbiAgICBcInNwZWNcIjoge1xuICAgICAgXCJsbG1cIjoge1xuICAgICAgICBcInByb3ZpZGVyc1wiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjcmVkZW50aWFsc1NlY3JldFJlZlwiOiB7XG4gICAgICAgICAgICAgIFwibmFtZVwiOiBcImNyZWRlbnRpYWxzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIm1vZGVsc1wiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJncHQtMy41LXR1cmJvLTExMDZcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiT3BlbkFJXCJcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbl0iLCJjYXBhYmlsaXRpZXMiOiJCYXNpYyBJbnN0YWxsIiwiY3JlYXRlZEF0IjoiMjAyNC0wMi0yNFQxMzozMToyNloiLCJvcGVyYXRvcnMub3BlcmF0b3JmcmFtZXdvcmsuaW8vYnVpbGRlciI6Im9wZXJhdG9yLXNkay12MS4zMy4wIiwib3BlcmF0b3JzLm9wZXJhdG9yZnJhbWV3b3JrLmlvL3Byb2plY3RfbGF5b3V0IjoiZ28ua3ViZWJ1aWxkZXIuaW8vdjQifSwibmFtZSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3IudjAuMC4wIiwibmFtZXNwYWNlIjoicGxhY2Vob2xkZXIifSwic3BlYyI6eyJhcGlzZXJ2aWNlZGVmaW5pdGlvbnMiOnt9LCJjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zIjp7Im93bmVkIjpbeyJkZXNjcmlwdGlvbiI6Ik9MU0NvbmZpZyBpcyB0aGUgU2NoZW1hIGZvciB0aGUgb2xzY29uZmlncyBBUEkiLCJkaXNwbGF5TmFtZSI6Ik9MU0NvbmZpZyIsImtpbmQiOiJPTFNDb25maWciLCJuYW1lIjoib2xzY29uZmlncy5vbHMub3BlbnNoaWZ0LmlvIiwidmVyc2lvbiI6InYxYWxwaGExIn1dfSwiZGVzY3JpcHRpb24iOiJPcGVuU2hpZnQgTGlnaHRTcGVlZCAoT0xTKSBpcyBhbiBBSSBwb3dlcmVkIGFzc2lzdGFudCB0aGF0IHJ1bnMgb24gT3BlblNoaWZ0IGFuZCBwcm92aWRlcyBhbnN3ZXJzIHRvIHByb2R1Y3QgcXVlc3Rpb25zIHVzaW5nIGJhY2tlbmQgTExNIHNlcnZpY2VzLiIsImRpc3BsYXlOYW1lIjoiT3BlbnNoaWZ0IExpZ2h0c3BlZWQiLCJpY29uIjpbeyJiYXNlNjRkYXRhIjoiIiwibWVkaWF0eXBlIjoiIn1dLCJpbnN0YWxsIjp7InNwZWMiOnsiY2x1c3RlclBlcm1pc3Npb25zIjpbeyJydWxlcyI6W3siYXBpR3JvdXBzIjpbImFwcHMiXSwicmVzb3VyY2VzIjpbImRlcGxveW1lbnRzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiY29uZmlnbWFwcyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbInNlcnZpY2VhY2NvdW50cyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbInNlcnZpY2VzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbIm9scy5vcGVuc2hpZnQuaW8iXSwicmVzb3VyY2VzIjpbIm9sc2NvbmZpZ3MiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsib2xzLm9wZW5zaGlmdC5pbyJdLCJyZXNvdXJjZXMiOlsib2xzY29uZmlncy9maW5hbGl6ZXJzIl0sInZlcmJzIjpbInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJvbHMub3BlbnNoaWZ0LmlvIl0sInJlc291cmNlcyI6WyJvbHNjb25maWdzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiLCJwYXRjaCIsInVwZGF0ZSJdfSx7ImFwaUdyb3VwcyI6WyJhdXRoZW50aWNhdGlvbi5rOHMuaW8iXSwicmVzb3VyY2VzIjpbInRva2VucmV2aWV3cyJdLCJ2ZXJicyI6WyJjcmVhdGUiXX0seyJhcGlHcm91cHMiOlsiYXV0aG9yaXphdGlvbi5rOHMuaW8iXSwicmVzb3VyY2VzIjpbInN1YmplY3RhY2Nlc3NyZXZpZXdzIl0sInZlcmJzIjpbImNyZWF0ZSJdfV0sInNlcnZpY2VBY2NvdW50TmFtZSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIn1dLCJkZXBsb3ltZW50cyI6W3sibGFiZWwiOnsiYXBwLmt1YmVybmV0ZXMuaW8vY29tcG9uZW50IjoibWFuYWdlciIsImFwcC5rdWJlcm5ldGVzLmlvL2NyZWF0ZWQtYnkiOiJsaWdodHNwZWVkLW9wZXJhdG9yIiwiYXBwLmt1YmVybmV0ZXMuaW8vaW5zdGFuY2UiOiJjb250cm9sbGVyLW1hbmFnZXIiLCJhcHAua3ViZXJuZXRlcy5pby9tYW5hZ2VkLWJ5Ijoia3VzdG9taXplIiwiYXBwLmt1YmVybmV0ZXMuaW8vbmFtZSI6ImRlcGxveW1lbnQiLCJhcHAua3ViZXJuZXRlcy5pby9wYXJ0LW9mIjoibGlnaHRzcGVlZC1vcGVyYXRvciIsImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6ImxpZ2h0c3BlZWQtb3BlcmF0b3ItY29udHJvbGxlci1tYW5hZ2VyIiwic3BlYyI6eyJyZXBsaWNhcyI6MSwic2VsZWN0b3IiOnsibWF0Y2hMYWJlbHMiOnsiY29udHJvbC1wbGFuZSI6ImNvbnRyb2xsZXItbWFuYWdlciJ9fSwic3RyYXRlZ3kiOnt9LCJ0ZW1wbGF0ZSI6eyJtZXRhZGF0YSI6eyJhbm5vdGF0aW9ucyI6eyJrdWJlY3RsLmt1YmVybmV0ZXMuaW8vZGVmYXVsdC1jb250YWluZXIiOiJtYW5hZ2VyIn0sImxhYmVscyI6eyJjb250cm9sLXBsYW5lIjoiY29udHJvbGxlci1tYW5hZ2VyIn19LCJzcGVjIjp7ImNvbnRhaW5lcnMiOlt7ImFyZ3MiOlsiLS1oZWFsdGgtcHJvYmUtYmluZC1hZGRyZXNzPTo4MDgxIiwiLS1tZXRyaWNzLWJpbmQtYWRkcmVzcz0xMjcuMC4wLjE6ODA4MCIsIi0tbGVhZGVyLWVsZWN0IiwiLS1pbWFnZXM9bGlnaHRzcGVlZC1zZXJ2aWNlPXF1YXkuaW8vb3BlbnNoaWZ0L2xpZ2h0c3BlZWQtc2VydmljZS1hcGk6bGF0ZXN0Il0sImNvbW1hbmQiOlsiL21hbmFnZXIiXSwiZW52IjpbeyJuYW1lIjoiV0FUQ0hfTkFNRVNQQUNFIiwidmFsdWVGcm9tIjp7ImZpZWxkUmVmIjp7ImZpZWxkUGF0aCI6Im1ldGFkYXRhLmFubm90YXRpb25zWydvbG0udGFyZ2V0TmFtZXNwYWNlcyddIn19fV0sImltYWdlIjoicXVheS5pby9vcGVuc2hpZnQvbGlnaHRzcGVlZC1vcGVyYXRvcjpsYXRlc3QiLCJsaXZlbmVzc1Byb2JlIjp7Imh0dHBHZXQiOnsicGF0aCI6Ii9oZWFsdGh6IiwicG9ydCI6ODA4MX0sImluaXRpYWxEZWxheVNlY29uZHMiOjE1LCJwZXJpb2RTZWNvbmRzIjoyMH0sIm5hbWUiOiJtYW5hZ2VyIiwicmVhZGluZXNzUHJvYmUiOnsiaHR0cEdldCI6eyJwYXRoIjoiL3JlYWR5eiIsInBvcnQiOjgwODF9LCJpbml0aWFsRGVsYXlTZWNvbmRzIjo1LCJwZXJpb2RTZWNvbmRzIjoxMH0sInJlc291cmNlcyI6eyJsaW1pdHMiOnsiY3B1IjoiNTAwbSIsIm1lbW9yeSI6IjEyOE1pIn0sInJlcXVlc3RzIjp7ImNwdSI6IjEwbSIsIm1lbW9yeSI6IjY0TWkifX0sInNlY3VyaXR5Q29udGV4dCI6eyJhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24iOmZhbHNlLCJjYXBhYmlsaXRpZXMiOnsiZHJvcCI6WyJBTEwiXX19fSx7ImFyZ3MiOlsiLS1zZWN1cmUtbGlzdGVuLWFkZHJlc3M9MC4wLjAuMDo4NDQzIiwiLS11cHN0cmVhbT1odHRwOi8vMTI3LjAuMC4xOjgwODAvIiwiLS1sb2d0b3N0ZGVycj10cnVlIiwiLS12PTAiXSwiaW1hZ2UiOiJnY3IuaW8va3ViZWJ1aWxkZXIva3ViZS1yYmFjLXByb3h5OnYwLjE0LjEiLCJuYW1lIjoia3ViZS1yYmFjLXByb3h5IiwicG9ydHMiOlt7ImNvbnRhaW5lclBvcnQiOjg0NDMsIm5hbWUiOiJodHRwcyIsInByb3RvY29sIjoiVENQIn1dLCJyZXNvdXJjZXMiOnsibGltaXRzIjp7ImNwdSI6IjUwMG0iLCJtZW1vcnkiOiIxMjhNaSJ9LCJyZXF1ZXN0cyI6eyJjcHUiOiI1bSIsIm1lbW9yeSI6IjY0TWkifX0sInNlY3VyaXR5Q29udGV4dCI6eyJhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb24iOmZhbHNlLCJjYXBhYmlsaXRpZXMiOnsiZHJvcCI6WyJBTEwiXX19fV0sInNlY3VyaXR5Q29udGV4dCI6eyJydW5Bc05vblJvb3QiOnRydWV9LCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJsaWdodHNwZWVkLW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlciIsInRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzIjoxMH19fX1dLCJwZXJtaXNzaW9ucyI6W3sicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbImNvbmZpZ21hcHMiXSwidmVyYnMiOlsiZ2V0IiwibGlzdCIsIndhdGNoIiwiY3JlYXRlIiwidXBkYXRlIiwicGF0Y2giLCJkZWxldGUiXX0seyJhcGlHcm91cHMiOlsiY29vcmRpbmF0aW9uLms4cy5pbyJdLCJyZXNvdXJjZXMiOlsibGVhc2VzIl0sInZlcmJzIjpbImdldCIsImxpc3QiLCJ3YXRjaCIsImNyZWF0ZSIsInVwZGF0ZSIsInBhdGNoIiwiZGVsZXRlIl19LHsiYXBpR3JvdXBzIjpbIiJdLCJyZXNvdXJjZXMiOlsiZXZlbnRzIl0sInZlcmJzIjpbImNyZWF0ZSIsInBhdGNoIl19XSwic2VydmljZUFjY291bnROYW1lIjoibGlnaHRzcGVlZC1vcGVyYXRvci1jb250cm9sbGVyLW1hbmFnZXIifV19LCJzdHJhdGVneSI6ImRlcGxveW1lbnQifSwiaW5zdGFsbE1vZGVzIjpbeyJzdXBwb3J0ZWQiOmZhbHNlLCJ0eXBlIjoiT3duTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOmZhbHNlLCJ0eXBlIjoiU2luZ2xlTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOmZhbHNlLCJ0eXBlIjoiTXVsdGlOYW1lc3BhY2UifSx7InN1cHBvcnRlZCI6dHJ1ZSwidHlwZSI6IkFsbE5hbWVzcGFjZXMifV0sImtleXdvcmRzIjpbImFpIiwiYXNzaXN0YW50IiwibGxtIiwib3BlbnNoaWZ0Il0sImxpbmtzIjpbeyJuYW1lIjoiTGlnaHRzcGVlZCBPcGVyYXRvciIsInVybCI6Imh0dHBzOi8vbGlnaHRzcGVlZC1vcGVyYXRvci5kb21haW4ifV0sIm1hdHVyaXR5IjoiYWxwaGEiLCJwcm92aWRlciI6eyJuYW1lIjoiUmVkIEhhdCwgSW5jIiwidXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL29wZW5zaGlmdC9saWdodHNwZWVkLXNlcnZpY2UifSwidmVyc2lvbiI6IjAuMC4wIn19
- type: olm.bundle.object
  value:
    data: 
relatedImages:
- image: gcr.io/kubebuilder/kube-rbac-proxy:v0.14.1
  name: ""
- image: quay.io/openshift/lightspeed-operator:latest
  name: ""
- image: quay.io/xrajesh/lightspeed-operator-bundle@sha256:dfa1d7fd22ac7b7bdfd26bbb2e3c9f93b25454450b6bc92da670043efa4d8037
  name: ""
schema: olm.bundle
